AWSTemplateFormatVersion: '2010-09-09'
Description: Create a VPC with three public subnets and three private subnets with an internet gateway, a NAT gateway, public and private route tables, public and private Network ACLs, and security groups for Lambda, Bastion host, and database.

Parameters:
  EnvironmentName:
    Description: Name of the environment
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
      - qa
  VPCName:
    Type: String
    Description: Name of the VPC
    Default: cru-wine-vpc
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for VPC
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.0.0/24
    Description: CIDR block for public subnet 1
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for public subnet 2
  PublicSubnet3Cidr:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for public subnet 3
  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.3.0/24
    Description: CIDR block for private subnet 1
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.4.0/24
    Description: CIDR block for private subnet 2
  PrivateSubnet3Cidr:
    Type: String
    Default: 10.0.5.0/24
    Description: CIDR block for private subnet 3

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${VPCName}
        - Key: Environment
          Value: !Ref EnvironmentName

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select [ 0, !GetAZs ]
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${VPCName}-PublicSubnet1
        - Key: Environment
          Value: !Ref EnvironmentName

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select [ 1, !GetAZs ]
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${VPCName}-PublicSubnet2
        - Key: Environment
          Value: !Ref EnvironmentName

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet3Cidr
      AvailabilityZone: !Select [ 2, !GetAZs ]
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${VPCName}-PublicSubnet3
        - Key: Environment
          Value: !Ref EnvironmentName

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select [ 0, !GetAZs ]
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${VPCName}-PrivateSubnet1
        - Key: Environment
          Value: !Ref EnvironmentName

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [ 1, !GetAZs ]
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${VPCName}-PrivateSubnet2
        - Key: Environment
          Value: !Ref EnvironmentName

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet3Cidr
      AvailabilityZone: !Select [ 2, !GetAZs ]
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${VPCName}-PrivateSubnet3
        - Key: Environment
          Value: !Ref EnvironmentName

  # Internet gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${VPCName}-InternetGateway
        - Key: Environment
          Value: !Ref EnvironmentName

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${VPCName}-PublicRouteTable
        - Key: Environment
          Value: !Ref EnvironmentName

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable
  
  # Public NACL
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${VPCName}-PublicNetworkAcl
        - Key: Environment
          Value: !Ref EnvironmentName
  
  InboundPublicNetworkAclEntryAllowInternet:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 0
        To: 65535

  OutboundPublicNetworkAclEntryAllowInternet:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 0
        To: 65535
  
  PublicSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicNetworkAcl
  
  PublicSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref PublicNetworkAcl
  
  PublicSubnet3NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      NetworkAclId: !Ref PublicNetworkAcl

  # NAT Gateway
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${VPCName}-NATGatewayEIP
        - Key: Environment
          Value: !Ref EnvironmentName

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${VPCName}-NATGateway
        - Key: Environment
          Value: !Ref EnvironmentName

  # Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${VPCName}-PrivateRouteTable
        - Key: Environment
          Value: !Ref EnvironmentName

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable

  # Private NACL
  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${VPCName}-PrivateNetworkAcl
        - Key: Environment
          Value: !Ref EnvironmentName
  
  # Allow all inbound traffic from the VPC
  InboundPrivateNetworkAclEntryAllowVPC:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: !Ref VpcCidr
      PortRange:
        From: 0
        To: 65535
  
  # Allow return traffic from the NAT Gateway (Response Traffic)
  InboundPrivateNetworkAclEntryAllowNATGatewayResponse:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 101
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 1024
        To: 65535
  
  # Allow all outbound traffic to the Internet
  OutboundPrivateNetworkAclEntryAllowInternet:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 0
        To: 65535
  
  PrivateSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      NetworkAclId: !Ref PrivateNetworkAcl

  PrivateSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      NetworkAclId: !Ref PrivateNetworkAcl
  
  PrivateSubnet3NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      NetworkAclId: !Ref PrivateNetworkAcl
  
  # Security Groups
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}-${VPCName}-LambdaSecurityGroup
      GroupDescription: Security group for Lambda functions
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          Description: Allow all inbound traffic from the VPC
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref VpcCidr
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${VPCName}-LambdaSecurityGroup
        - Key: Environment
          Value: !Ref EnvironmentName
    
  DataPollerLambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}-${VPCName}-DataPollerLambdaSecurityGroup
      GroupDescription: Security group for Data Poller Lambda function
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          Description: Allow all inbound traffic from the VPC
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref VpcCidr
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${VPCName}-DataPollerLambdaSecurityGroup
        - Key: Environment
          Value: !Ref EnvironmentName
  
  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}-${VPCName}-BastionHostSecurityGroup
      GroupDescription: Security group for Bastion host
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          Description: Allow SSH access from the Internet
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          Description: Allow HTTPS access from the Internet
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${VPCName}-BastionHostSecurityGroup
        - Key: Environment
          Value: !Ref EnvironmentName
  
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}-${VPCName}-DatabaseSecurityGroup
      GroupDescription: Security group for database
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          Description: Allow all inbound traffic from the VPC
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref VpcCidr
        - IpProtocol: tcp
          Description: Allow All traffic from the Lambda security group
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
        - IpProtocol: tcp
          Description: Allow All traffic from the Bastion host security group
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: !Ref BastionHostSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${VPCName}-DatabaseSecurityGroup
        - Key: Environment
          Value: !Ref EnvironmentName
  # SSMVPCEndpoint:
  #   Type: AWS::EC2::VPCEndpoint
  #   Properties:
  #     VpcId: !Ref VPC
  #     ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
  #     VpcEndpointType: Interface
  #     SubnetIds:
  #       - !Ref PrivateSubnet1
  #       - !Ref PrivateSubnet2
  #       - !Ref PrivateSubnet3
  #     SecurityGroupIds:
  #       - !Ref LambdaSecurityGroup
  #     PrivateDnsEnabled: true
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${EnvironmentName}-${VPCName}-SSMVPCEndpoint
  #       - Key: Environment
  #         Value: !Ref EnvironmentName

  # SSMMessagesVPCEndpoint:
  #   Type: AWS::EC2::VPCEndpoint
  #   Properties:
  #     VpcId: !Ref VPC
  #     ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
  #     VpcEndpointType: Interface
  #     SubnetIds:
  #       - !Ref PrivateSubnet1
  #       - !Ref PrivateSubnet2
  #       - !Ref PrivateSubnet3
  #     SecurityGroupIds:
  #       - !Ref LambdaSecurityGroup
  #     PrivateDnsEnabled: true
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${EnvironmentName}-${VPCName}-SSMMessagesVPCEndpoint
  #       - Key: Environment
  #         Value: !Ref EnvironmentName

  # EC2MessagesVPCEndpoint:
  #   Type: AWS::EC2::VPCEndpoint
  #   Properties:
  #     VpcId: !Ref VPC
  #     ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
  #     VpcEndpointType: Interface
  #     SubnetIds:
  #       - !Ref PrivateSubnet1
  #       - !Ref PrivateSubnet2
  #       - !Ref PrivateSubnet3
  #     SecurityGroupIds:
  #       - !Ref LambdaSecurityGroup
  #     PrivateDnsEnabled: true
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${EnvironmentName}-${VPCName}-EC2MessagesVPCEndpoint
  #       - Key: Environment
  #         Value: !Ref EnvironmentName

  # SecretsManagerVPCEndpoint:
  #   Type: AWS::EC2::VPCEndpoint
  #   Properties:
  #     VpcId: !Ref VPC
  #     ServiceName: !Sub com.amazonaws.${AWS::Region}.secretsmanager
  #     VpcEndpointType: Interface
  #     SubnetIds:
  #       - !Ref PrivateSubnet1
  #       - !Ref PrivateSubnet2
  #       - !Ref PrivateSubnet3
  #     SecurityGroupIds:
  #       - !Ref LambdaSecurityGroup
  #     PrivateDnsEnabled: true
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${EnvironmentName}-${VPCName}-SecretsManagerVPCEndpoint
  #       - Key: Environment
  #         Value: !Ref EnvironmentName

  # SQSVPCEndpoint:
  #   Type: AWS::EC2::VPCEndpoint
  #   Properties:
  #     VpcId: !Ref VPC
  #     ServiceName: !Sub com.amazonaws.${AWS::Region}.sqs
  #     VpcEndpointType: Interface
  #     SubnetIds:
  #       - !Ref PrivateSubnet1
  #       - !Ref PrivateSubnet2
  #       - !Ref PrivateSubnet3
  #     SecurityGroupIds:
  #       - !Ref LambdaSecurityGroup
  #     PrivateDnsEnabled: true
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${EnvironmentName}-${VPCName}-SQSVPCEndpoint
  #       - Key: Environment
  #         Value: !Ref EnvironmentName
  
  # S3VPCGatewayEndpoint:
  #   Type: AWS::EC2::VPCEndpoint
  #   Properties:
  #     VpcId: !Ref VPC
  #     ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
  #     VpcEndpointType: Gateway
  #     RouteTableIds:
  #       - !Ref PrivateRouteTable
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${EnvironmentName}-${VPCName}-S3VPCGatewayEndpoint
  #       - Key: Environment
  #         Value: !Ref EnvironmentName

Outputs:
  AccountId:
    Description: AWS Account ID
    Value: !Ref AWS::AccountId
  RegionName:
    Description: AWS Region Name
    Value: !Ref AWS::Region
  StackId:
    Description: Current Stack ID
    Value: !Ref AWS::StackId
  StackName:
    Description: Current Stack Name
    Value: !Ref AWS::StackName
  Environment:
    Description: Environment name
    Value: !Ref EnvironmentName
  VpcId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-${VPCName}-id
  PublicSubnet1Id:
    Description: Public subnet 1 ID
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-${VPCName}-public-subnet1-id
  PublicSubnet2Id:
    Description: Public subnet 2 ID
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-${VPCName}-public-subnet2-id
  PublicSubnet3Id:
    Description: Public subnet 3 ID
    Value: !Ref PublicSubnet3
    Export:
      Name: !Sub ${EnvironmentName}-${VPCName}-public-subnet3-id
  PrivateSubnet1Id:
    Description: Private subnet 1 ID
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-${VPCName}-private-subnet1-id
  PrivateSubnet2Id:
    Description: Private subnet 2 ID
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-${VPCName}-private-subnet2-id
  PrivateSubnet3Id:
    Description: Private subnet 3 ID
    Value: !Ref PrivateSubnet3
    Export:
      Name: !Sub ${EnvironmentName}-${VPCName}-private-subnet3-id
  LambdaSecurityGroupId:
    Description: Lambda security group ID
    Value: !Ref LambdaSecurityGroup
    Export:
      Name: !Sub ${EnvironmentName}-${VPCName}-lambda-security-group-id
  DataPollerLambdaSecurityGroupId:
    Description: Data Poller Lambda security group ID
    Value: !Ref DataPollerLambdaSecurityGroup
    Export:
      Name: !Sub ${EnvironmentName}-${VPCName}-data-poller-lambda-security-group-id
  BastionHostSecurityGroupId:
    Description: Bastion host security group ID
    Value: !Ref BastionHostSecurityGroup
    Export:
      Name: !Sub ${EnvironmentName}-${VPCName}-bastion-host-security-group-id
  DatabaseSecurityGroupId:
    Description: Database security group ID
    Value: !Ref DatabaseSecurityGroup
    Export:
      Name: !Sub ${EnvironmentName}-${VPCName}-database-security-group-id
